generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum EventType {
  FEATURED
  UPCOMING
  PAST
}

model User {
  id                    String                 @id @default(cuid())
  username              String?                @unique
  bio                   String?
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Products {
  id          String   @id @default(cuid())
  title       String
  price       String
  description String
  link        String
  image       String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  venue       String
  date        DateTime
  link        String
  image       String[]
  eventType   EventType
  notify      Boolean
  archived    Boolean   @default(false)
  tags        String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Blog {
  id        String   @id @default(cuid())
  thumbnail String
  title     String
  content   String
  likes     Int      @default(0)
  toggle    Boolean  @default(false)
  archived  Boolean  @default(false)
  name      String
  userName  String
  userImage String
  role      UserRole
  likedId   String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model EcommerceEndpoint {
  id        String   @id @default(cuid())
  baseUrl   String
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentManagement {
  id        String   @id @default(cuid())
  shipping  String
  tax       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Careers {
  id          String   @id @default(cuid())
  title       String
  description String
  link        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Refund {
  id        String   @id @default(cuid())
  title     String
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collabs {
  id        String   @id @default(cuid())
  name      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
